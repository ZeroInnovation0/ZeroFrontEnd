"""
Django settings for zero project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-oql23$z$s$w3m8k_+3+mc32z6*dk#m)0jg+o+!7t-4ag9kk-pz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'landing',
    'home',
    'social_django',
    'profiles',
    'activity',
    'accounts.apps.AccountsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'zero.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]




WSGI_APPLICATION = 'zero.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'zero_db',
        'USER': 'postgres',
        'PASSWORD': 'something123',
        'HOST': 'localhost',
        'PORT': '5432',
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), # âœ… this is correct
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Used by collectstatic in production

# Media files (user-uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # This will create a 'media' folder at your project root

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Google OAuth2 Configuration
AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',  # Google authentication backend
    'django.contrib.auth.backends.ModelBackend',  # Default Django authentication
]

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '512120055820-76mm71p57r5k1pe6bgivha8in3uqnine.apps.googleusercontent.com'  # Replace with your Client ID
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'  # Replace with your Client Secret

SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
]

SOCIAL_AUTH_ALWAYS_REDIRECT = True
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/home/'  # Redirect to home after login
SOCIAL_AUTH_LOGIN_ERROR_URL = '/authentication/'  # Redirect on login failure
LOGIN_REDIRECT_URL = '/home/'
LOGIN_URL = '/authentication/'

# Use email as username (helps prevent duplicate username collisions)
SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True

# Pipeline configuration
# settings.py

SOCIAL_AUTH_PIPELINE = (
    # Get the basic social profile details (uid, extra_data)
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',

    # This step tries to load an existing user based on the social UID.
    # It also sets up the 'strategy' object with the current backend.
    'social_core.pipeline.social_auth.social_user',

    # At this point, 'strategy.backend' should be fully initialized.
    # Now, attempt to find a user by email, which might be a pre-existing non-social account.
    'social_core.pipeline.social_auth.associate_by_email',

    # --- Your custom pipeline function should come AFTER 'social_user' and 'associate_by_email' ---
    # This is where 'strategy.backend.name' should now be reliably available.
    'accounts.pipeline.prevent_social_login_if_email_exists',

    # Get a username, creating a new user if not already associated/found
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user', # Creates a new user if 'user' is None so far

    # --- Your custom pipeline function for saving user details ---
    'accounts.pipeline.save_user_details',

    # Associate the social account with the user (whether newly created or existing)
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details', # Update user details with social data
)

AUTH_USER_MODEL = 'accounts.User'